import sys
# from string import Template
if __name__ == '__main__':
    cfg = sys.argv[1]
    out = sys.argv[2]
    with open(cfg, 'r') as f:
        config = eval(f.read())
    instantiate = []
    variants = config['variants']
    with open(out, 'w') as f:
        def w(s):
            f.write(s)
        w(r'''/******  AUTO GENERATED BY configure.py ******/
#pragma once
''')
        w('#define AKR_CORE_STRUCT(Name) ')
        for enabled in config['enabled']:
            w('template struct Name<{0}>;'.format(variants[enabled]['Float']))
        w('\n')
        w('#define AKR_CORE_CLASS(Name) ')
        for enabled in config['enabled']:
            w('template class Name<{0}>;'.format(variants[enabled]['Float']))
        w('\n')
        w('#define AKR_RENDER_STRUCT(Name) ')
        for enabled in config['enabled']:
            w('template struct Name<{0},{1}>;'.format(
                variants[enabled]['Float'], variants[enabled]['Spectrum']))
        w('\n')
        w('#define AKR_RENDER_CLASS(Name) ')
        for enabled in config['enabled']:
            w('template class Name<{0},{1}>;'.format(
                variants[enabled]['Float'], variants[enabled]['Spectrum']))
        w('\n')
        w('template<typename Float, typename Spectrum>constexpr const char * get_variant_string(){\n')
        for enabled in config['enabled']:
            w('    if constexpr(std::is_same_v<Float, {0}> && std::is_same_v<Spectrum, {1}>)return "{2}";'.format(
                variants[enabled]['Float'], variants[enabled]['Spectrum'], enabled))
        w('\n    return "unknown";\n}\n')
        w('#define AKR_INVOKE_VARIANT(variant, func, ...) ([&](){\\\n')
        for enabled in config['enabled']:
            w('    if (variant == "{}")\\\n'.format(enabled))
            w('        return func<{}, {}>(__VA_ARGS__);\\\n'.format(variants[enabled]['Float'], variants[enabled]['Spectrum']))
        w('    throw std::runtime_error("unsupported variant");\\\n')
        w('})()\n')
        w('constexpr const char * enabled_variants = {')
        for enabled in config['enabled']:
            w('"{}"'.format(enabled))
        w('};\n')
